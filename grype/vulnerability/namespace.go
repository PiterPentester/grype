package vulnerability

import (
	"fmt"
	"strings"

	"github.com/anchore/grype/grype/pkg"
	"github.com/anchore/grype/internal"
	"github.com/anchore/syft/syft/distro"
	syftPkg "github.com/anchore/syft/syft/pkg"
)

type namer func(p pkg.Package) []string

func defaultNamer(p pkg.Package) []string {
	return []string{p.Name}
}

func githubJavaNamer(p pkg.Package) []string {
	names := internal.NewStringSet()

	// all github advisories are stored by "<group-name>:<artifact-name>"
	if metadata, ok := p.Metadata.(pkg.JavaMetadata); ok {
		if metadata.PomGroupID != "" {
			if metadata.PomArtifactID != "" {
				names.Add(fmt.Sprintf("%s:%s", metadata.PomGroupID, metadata.PomArtifactID))
			}
			if metadata.ManifestName != "" {
				names.Add(fmt.Sprintf("%s:%s", metadata.PomGroupID, metadata.ManifestName))
			}
		}
	}

	return names.ToSlice()
}

// TODO: expand with namer mapping to be more generic?
func distroNamespace(d distro.Distro) string {
	// TODO: can we drive this from information from grype-db? that would be ideal...
	var distroStr string
	switch d.Type {
	case distro.CentOS, distro.RedHat:
		distroStr = "rhel"
	case distro.AmazonLinux:
		distroStr = "amzn"
	case distro.OracleLinux:
		distroStr = "ol"
	case distro.Alpine:
		// XXX this assumes that a major and minor versions will always exist in Segments
		segments := d.Version.Segments()
		return fmt.Sprintf("%s:%d.%d", d.Type.String(), segments[0], segments[1])
	default:
		distroStr = d.Type.String()
	}
	return fmt.Sprintf("%s:%s", strings.ToLower(distroStr), d.FullVersion())
}

func languageNamespaces(l syftPkg.Language) map[string]namer {
	namespaces := make(map[string]namer)
	// TODO: can we drive this from information from grype-db? that would be ideal...
	switch l {
	case syftPkg.Ruby:
		namespaces["github:gem"] = defaultNamer
	case syftPkg.Java:
		namespaces["github:java"] = githubJavaNamer
	case syftPkg.JavaScript:
		namespaces["github:npm"] = defaultNamer
	case syftPkg.Python:
		namespaces["github:python"] = defaultNamer
	}
	return namespaces
}

func cpeNamespaces() []string {
	return []string{"nvd"}
}
